// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc199.Offseason2017;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	
	public static SpeedController drivetrainLeftMotor;
    public static SpeedController drivetrainRightMotor;
    public static RobotDrive drivetrainRobotDrive;
    public static Encoder drivetrainLeftEncoder;
    public static Encoder drivetrainRightEncoder;
    public static DoubleSolenoid drivetrainGearShifter;
    public static Compressor drivetrainCompressor;
    public static PowerDistributionPanel drivetrainPDP;
    public static SpeedController gearIntakeRollerBarMotor;
    public static DoubleSolenoid gearIntakeGearIntakePivot;

    
    public static void init() {
    	
        drivetrainLeftMotor = new Talon(0);
        LiveWindow.addActuator("Drivetrain", "Left Motor", (Talon) drivetrainLeftMotor);
        
        drivetrainRightMotor = new Talon(1);
        LiveWindow.addActuator("Drivetrain", "Right Motor", (Talon) drivetrainRightMotor);
        
        drivetrainRobotDrive = new RobotDrive(drivetrainLeftMotor, drivetrainRightMotor);
        
        drivetrainRobotDrive.setSafetyEnabled(true);
        drivetrainRobotDrive.setExpiration(0.1);
        drivetrainRobotDrive.setSensitivity(0.5);
        drivetrainRobotDrive.setMaxOutput(1.0);

        drivetrainLeftEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "Left Encoder", drivetrainLeftEncoder);
        drivetrainLeftEncoder.setDistancePerPulse(1.0);
        drivetrainLeftEncoder.setPIDSourceType(PIDSourceType.kRate);
        drivetrainRightEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "Right Encoder", drivetrainRightEncoder);
        drivetrainRightEncoder.setDistancePerPulse(1.0);
        drivetrainRightEncoder.setPIDSourceType(PIDSourceType.kRate);
        drivetrainGearShifter = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Drivetrain", "Gear Shifter", drivetrainGearShifter);
        
        drivetrainCompressor = new Compressor(0);
        
        
        drivetrainPDP = new PowerDistributionPanel(0);
        LiveWindow.addSensor("Drivetrain", "PDP", drivetrainPDP);
        
        gearIntakeRollerBarMotor = new Talon(2);
        LiveWindow.addActuator("Gear Intake", "Roller Bar Motor", (Talon) gearIntakeRollerBarMotor);
        
        gearIntakeGearIntakePivot = new DoubleSolenoid(0, 2, 3);
        LiveWindow.addActuator("Gear Intake", "Gear Intake Pivot", gearIntakeGearIntakePivot);
    }
}
